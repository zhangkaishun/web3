{
	"id": "d9146cdfb5da728c4d949307acb95867",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"test/数据类型.sol": {
				"content": "// SPDX-Licence-Identifier: MIT\r\npragma solidity ~0.8.20;\r\n\r\n\r\n/** \r\n        值类型（Value Types）\r\n        引用类型（Reference Types）\r\n        映射类型（Mapping Types）\r\n\r\n        值类型\r\n        值类型变量用表示可以用32个字节表示的数据，在赋值或传参时，总是进行拷贝。\r\n\r\n        值类型包含：\r\n\r\n                布尔类型（Booleans）\r\n                整型（Integers）\r\n                定长浮点型（Fixed Point Numbers）\r\n                定长字节数组（Fixed-size byte arrays）\r\n                有理数和整型常量（Rational and Integer Literals)\r\n                字符串常量（String literals）\r\n                十六进制常量（Hexadecimal literals）\r\n                枚举（Enums）\r\n                函数类型（Function Types）\r\n                地址类型（Address)\r\n                地址常量（Address Literals）\r\n                用户定义值类型\r\n\r\n\r\n    引用类型用来表示复杂类型，占用的空间超过32字节，拷贝时开销很大，因此可以使用引用的方式，通过多个不同名称的变量指向一个值。引用类型包括数组 和结构体。\r\n\r\n                在定义引用类型时，有一个额外属性来标识数据的存储位置，这个属性有：\r\n\r\n                memory（内存）： 变量在运行时存在，其生命周期只存在于函数调用期间。\r\n\r\n                storage（存储）：保存状态变量，只要合约存在就一直保存在区块链中。\r\n\r\n                calldata（调用数据）：用来存储函数参数的特殊数据位置，用来接收外部数据，是一个不可修改的、非持久的函数参数存储区域，只能用于函数入参，减少gas费用。\r\n\r\n                记住一个规则：不同引用类型在进行赋值的时候，只有在不同的数据位置赋值时会进行一份拷贝，而在同一数据位置内通常是增加一个引用。\r\n                 Solidity 规定返回值只能存储在 memory 或 storage，不能用 calldata。\r\n\r\n\r\n*/\r\ncontract DataTypeTest {\r\n    \r\n\r\n\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"test/数据类型.sol": {
				"DataTypeTest": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"test/\\xe6\\x95\\xb0\\xe6\\x8d\\xae\\xe7\\xb1\\xbb\\xe5\\x9e\\x8b.sol\":2103:2139  contract DataTypeTest {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"test/\\xe6\\x95\\xb0\\xe6\\x8d\\xae\\xe7\\xb1\\xbb\\xe5\\x9e\\x8b.sol\":2103:2139  contract DataTypeTest {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220403bf9dd8b02be3cdf93e76743fac5981e66196d37492d30663e97343201982664736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea2646970667358221220403bf9dd8b02be3cdf93e76743fac5981e66196d37492d30663e97343201982664736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x1A PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH EXTCODESIZE 0xF9 0xDD DUP12 MUL 0xBE EXTCODECOPY 0xDF SWAP4 0xE7 PUSH8 0x43FAC5981E66196D CALLDATACOPY BLOBHASH 0x2D ADDRESS PUSH7 0x3E973432019826 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "2103:36:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040525f80fdfea2646970667358221220403bf9dd8b02be3cdf93e76743fac5981e66196d37492d30663e97343201982664736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH EXTCODESIZE 0xF9 0xDD DUP12 MUL 0xBE EXTCODECOPY 0xDF SWAP4 0xE7 PUSH8 0x43FAC5981E66196D CALLDATACOPY BLOBHASH 0x2D ADDRESS PUSH7 0x3E973432019826 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "2103:36:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12400",
								"executionCost": "64",
								"totalCost": "12464"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2103,
									"end": 2139,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220403bf9dd8b02be3cdf93e76743fac5981e66196d37492d30663e97343201982664736f6c634300081a0033",
									".code": [
										{
											"begin": 2103,
											"end": 2139,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 2103,
											"end": 2139,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2103,
											"end": 2139,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2103,
											"end": 2139,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2103,
											"end": 2139,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2103,
											"end": 2139,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"test/数据类型.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u503c\\u7c7b\\u578b\\uff08Value Types\\uff09 \\u5f15\\u7528\\u7c7b\\u578b\\uff08Reference Types\\uff09 \\u6620\\u5c04\\u7c7b\\u578b\\uff08Mapping Types\\uff09 \\u503c\\u7c7b\\u578b \\u503c\\u7c7b\\u578b\\u53d8\\u91cf\\u7528\\u8868\\u793a\\u53ef\\u4ee5\\u752832\\u4e2a\\u5b57\\u8282\\u8868\\u793a\\u7684\\u6570\\u636e\\uff0c\\u5728\\u8d4b\\u503c\\u6216\\u4f20\\u53c2\\u65f6\\uff0c\\u603b\\u662f\\u8fdb\\u884c\\u62f7\\u8d1d\\u3002 \\u503c\\u7c7b\\u578b\\u5305\\u542b\\uff1a \\u5e03\\u5c14\\u7c7b\\u578b\\uff08Booleans\\uff09 \\u6574\\u578b\\uff08Integers\\uff09 \\u5b9a\\u957f\\u6d6e\\u70b9\\u578b\\uff08Fixed Point Numbers\\uff09 \\u5b9a\\u957f\\u5b57\\u8282\\u6570\\u7ec4\\uff08Fixed-size byte arrays\\uff09 \\u6709\\u7406\\u6570\\u548c\\u6574\\u578b\\u5e38\\u91cf\\uff08Rational and Integer Literals) \\u5b57\\u7b26\\u4e32\\u5e38\\u91cf\\uff08String literals\\uff09 \\u5341\\u516d\\u8fdb\\u5236\\u5e38\\u91cf\\uff08Hexadecimal literals\\uff09 \\u679a\\u4e3e\\uff08Enums\\uff09 \\u51fd\\u6570\\u7c7b\\u578b\\uff08Function Types\\uff09 \\u5730\\u5740\\u7c7b\\u578b\\uff08Address) \\u5730\\u5740\\u5e38\\u91cf\\uff08Address Literals\\uff09 \\u7528\\u6237\\u5b9a\\u4e49\\u503c\\u7c7b\\u578b \\u5f15\\u7528\\u7c7b\\u578b\\u7528\\u6765\\u8868\\u793a\\u590d\\u6742\\u7c7b\\u578b\\uff0c\\u5360\\u7528\\u7684\\u7a7a\\u95f4\\u8d85\\u8fc732\\u5b57\\u8282\\uff0c\\u62f7\\u8d1d\\u65f6\\u5f00\\u9500\\u5f88\\u5927\\uff0c\\u56e0\\u6b64\\u53ef\\u4ee5\\u4f7f\\u7528\\u5f15\\u7528\\u7684\\u65b9\\u5f0f\\uff0c\\u901a\\u8fc7\\u591a\\u4e2a\\u4e0d\\u540c\\u540d\\u79f0\\u7684\\u53d8\\u91cf\\u6307\\u5411\\u4e00\\u4e2a\\u503c\\u3002\\u5f15\\u7528\\u7c7b\\u578b\\u5305\\u62ec\\u6570\\u7ec4 \\u548c\\u7ed3\\u6784\\u4f53\\u3002 \\u5728\\u5b9a\\u4e49\\u5f15\\u7528\\u7c7b\\u578b\\u65f6\\uff0c\\u6709\\u4e00\\u4e2a\\u989d\\u5916\\u5c5e\\u6027\\u6765\\u6807\\u8bc6\\u6570\\u636e\\u7684\\u5b58\\u50a8\\u4f4d\\u7f6e\\uff0c\\u8fd9\\u4e2a\\u5c5e\\u6027\\u6709\\uff1a memory\\uff08\\u5185\\u5b58\\uff09\\uff1a \\u53d8\\u91cf\\u5728\\u8fd0\\u884c\\u65f6\\u5b58\\u5728\\uff0c\\u5176\\u751f\\u547d\\u5468\\u671f\\u53ea\\u5b58\\u5728\\u4e8e\\u51fd\\u6570\\u8c03\\u7528\\u671f\\u95f4\\u3002 storage\\uff08\\u5b58\\u50a8\\uff09\\uff1a\\u4fdd\\u5b58\\u72b6\\u6001\\u53d8\\u91cf\\uff0c\\u53ea\\u8981\\u5408\\u7ea6\\u5b58\\u5728\\u5c31\\u4e00\\u76f4\\u4fdd\\u5b58\\u5728\\u533a\\u5757\\u94fe\\u4e2d\\u3002 calldata\\uff08\\u8c03\\u7528\\u6570\\u636e\\uff09\\uff1a\\u7528\\u6765\\u5b58\\u50a8\\u51fd\\u6570\\u53c2\\u6570\\u7684\\u7279\\u6b8a\\u6570\\u636e\\u4f4d\\u7f6e\\uff0c\\u7528\\u6765\\u63a5\\u6536\\u5916\\u90e8\\u6570\\u636e\\uff0c\\u662f\\u4e00\\u4e2a\\u4e0d\\u53ef\\u4fee\\u6539\\u7684\\u3001\\u975e\\u6301\\u4e45\\u7684\\u51fd\\u6570\\u53c2\\u6570\\u5b58\\u50a8\\u533a\\u57df\\uff0c\\u53ea\\u80fd\\u7528\\u4e8e\\u51fd\\u6570\\u5165\\u53c2\\uff0c\\u51cf\\u5c11gas\\u8d39\\u7528\\u3002 \\u8bb0\\u4f4f\\u4e00\\u4e2a\\u89c4\\u5219\\uff1a\\u4e0d\\u540c\\u5f15\\u7528\\u7c7b\\u578b\\u5728\\u8fdb\\u884c\\u8d4b\\u503c\\u7684\\u65f6\\u5019\\uff0c\\u53ea\\u6709\\u5728\\u4e0d\\u540c\\u7684\\u6570\\u636e\\u4f4d\\u7f6e\\u8d4b\\u503c\\u65f6\\u4f1a\\u8fdb\\u884c\\u4e00\\u4efd\\u62f7\\u8d1d\\uff0c\\u800c\\u5728\\u540c\\u4e00\\u6570\\u636e\\u4f4d\\u7f6e\\u5185\\u901a\\u5e38\\u662f\\u589e\\u52a0\\u4e00\\u4e2a\\u5f15\\u7528\\u3002 Solidity \\u89c4\\u5b9a\\u8fd4\\u56de\\u503c\\u53ea\\u80fd\\u5b58\\u50a8\\u5728 memory \\u6216 storage\\uff0c\\u4e0d\\u80fd\\u7528 calldata\\u3002\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/\\u6570\\u636e\\u7c7b\\u578b.sol\":\"DataTypeTest\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"test/\\u6570\\u636e\\u7c7b\\u578b.sol\":{\"keccak256\":\"0x6ec6ce0a5359e97613c5983e73a94215bd033a2b3e2330895b2920ed6b7506f8\",\"urls\":[\"bzz-raw://d253cae6e79302ea8f6bba80dc81f1cc04ed5ae93cfda7830155fc5e4ea7d851\",\"dweb:/ipfs/QmUiiLQs1msDSk6UoTELvpSHUWiHbY38ParQhFvFWQ6u9M\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "值类型（Value Types） 引用类型（Reference Types） 映射类型（Mapping Types） 值类型 值类型变量用表示可以用32个字节表示的数据，在赋值或传参时，总是进行拷贝。 值类型包含： 布尔类型（Booleans） 整型（Integers） 定长浮点型（Fixed Point Numbers） 定长字节数组（Fixed-size byte arrays） 有理数和整型常量（Rational and Integer Literals) 字符串常量（String literals） 十六进制常量（Hexadecimal literals） 枚举（Enums） 函数类型（Function Types） 地址类型（Address) 地址常量（Address Literals） 用户定义值类型 引用类型用来表示复杂类型，占用的空间超过32字节，拷贝时开销很大，因此可以使用引用的方式，通过多个不同名称的变量指向一个值。引用类型包括数组 和结构体。 在定义引用类型时，有一个额外属性来标识数据的存储位置，这个属性有： memory（内存）： 变量在运行时存在，其生命周期只存在于函数调用期间。 storage（存储）：保存状态变量，只要合约存在就一直保存在区块链中。 calldata（调用数据）：用来存储函数参数的特殊数据位置，用来接收外部数据，是一个不可修改的、非持久的函数参数存储区域，只能用于函数入参，减少gas费用。 记住一个规则：不同引用类型在进行赋值的时候，只有在不同的数据位置赋值时会进行一份拷贝，而在同一数据位置内通常是增加一个引用。 Solidity 规定返回值只能存储在 memory 或 storage，不能用 calldata。",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/数据类型.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "test/数据类型.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"test/数据类型.sol": {
				"ast": {
					"absolutePath": "test/数据类型.sol",
					"exportedSymbols": {
						"DataTypeTest": [
							3
						]
					},
					"id": 4,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"~",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "DataTypeTest",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "63:2038:0",
								"text": "值类型（Value Types）\n引用类型（Reference Types）\n映射类型（Mapping Types）\n值类型\n值类型变量用表示可以用32个字节表示的数据，在赋值或传参时，总是进行拷贝。\n值类型包含：\n布尔类型（Booleans）\n整型（Integers）\n定长浮点型（Fixed Point Numbers）\n定长字节数组（Fixed-size byte arrays）\n有理数和整型常量（Rational and Integer Literals)\n字符串常量（String literals）\n十六进制常量（Hexadecimal literals）\n枚举（Enums）\n函数类型（Function Types）\n地址类型（Address)\n地址常量（Address Literals）\n用户定义值类型\n引用类型用来表示复杂类型，占用的空间超过32字节，拷贝时开销很大，因此可以使用引用的方式，通过多个不同名称的变量指向一个值。引用类型包括数组 和结构体。\n在定义引用类型时，有一个额外属性来标识数据的存储位置，这个属性有：\nmemory（内存）： 变量在运行时存在，其生命周期只存在于函数调用期间。\nstorage（存储）：保存状态变量，只要合约存在就一直保存在区块链中。\ncalldata（调用数据）：用来存储函数参数的特殊数据位置，用来接收外部数据，是一个不可修改的、非持久的函数参数存储区域，只能用于函数入参，减少gas费用。\n记住一个规则：不同引用类型在进行赋值的时候，只有在不同的数据位置赋值时会进行一份拷贝，而在同一数据位置内通常是增加一个引用。\nSolidity 规定返回值只能存储在 memory 或 storage，不能用 calldata。"
							},
							"fullyImplemented": true,
							"id": 3,
							"linearizedBaseContracts": [
								3
							],
							"name": "DataTypeTest",
							"nameLocation": "2112:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 4,
							"src": "2103:36:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:2106:0"
				},
				"id": 0
			}
		}
	}
}