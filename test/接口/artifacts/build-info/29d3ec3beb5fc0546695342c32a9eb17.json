{
	"id": "29d3ec3beb5fc0546695342c32a9eb17",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"test/接口/ICounter.sol": {
				"content": "// SPDX-Licence-Identifier: MIT\r\npragma solidity ~0.8.20;\r\n\r\n/** \r\n\r\n接口的作用主要体现在以下几个方面：\r\n\r\n规范行为：接口定义了一组方法，要求实现这个接口的合约必须提供这些方法的具体实现。通过实现接口，可以确保一组合约拥有相同的方法，并且这些方法的功能和行为是一致的，从而增强了代码的一致性和可预测性。\r\n\r\n解耦合：接口可以将定义方法的部分与具体实现合约分离，从而实现了解耦合。因此我们可以基于接口来进行合约间的相互调用， 而不是基于实现。\r\n\r\n**/\r\ninterface ICounter {\r\n    //接口中的所有方法都是隐含的 virtual 方法，因此即便没有 virtual，也可以被重写。\r\n\r\n\r\n    function increment() external ;\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"test/接口/ICounter.sol": {
				"ICounter": {
					"abi": [
						{
							"inputs": [],
							"name": "increment",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"increment()": "d09de08a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u63a5\\u53e3\\u7684\\u4f5c\\u7528\\u4e3b\\u8981\\u4f53\\u73b0\\u5728\\u4ee5\\u4e0b\\u51e0\\u4e2a\\u65b9\\u9762\\uff1a \\u89c4\\u8303\\u884c\\u4e3a\\uff1a\\u63a5\\u53e3\\u5b9a\\u4e49\\u4e86\\u4e00\\u7ec4\\u65b9\\u6cd5\\uff0c\\u8981\\u6c42\\u5b9e\\u73b0\\u8fd9\\u4e2a\\u63a5\\u53e3\\u7684\\u5408\\u7ea6\\u5fc5\\u987b\\u63d0\\u4f9b\\u8fd9\\u4e9b\\u65b9\\u6cd5\\u7684\\u5177\\u4f53\\u5b9e\\u73b0\\u3002\\u901a\\u8fc7\\u5b9e\\u73b0\\u63a5\\u53e3\\uff0c\\u53ef\\u4ee5\\u786e\\u4fdd\\u4e00\\u7ec4\\u5408\\u7ea6\\u62e5\\u6709\\u76f8\\u540c\\u7684\\u65b9\\u6cd5\\uff0c\\u5e76\\u4e14\\u8fd9\\u4e9b\\u65b9\\u6cd5\\u7684\\u529f\\u80fd\\u548c\\u884c\\u4e3a\\u662f\\u4e00\\u81f4\\u7684\\uff0c\\u4ece\\u800c\\u589e\\u5f3a\\u4e86\\u4ee3\\u7801\\u7684\\u4e00\\u81f4\\u6027\\u548c\\u53ef\\u9884\\u6d4b\\u6027\\u3002 \\u89e3\\u8026\\u5408\\uff1a\\u63a5\\u53e3\\u53ef\\u4ee5\\u5c06\\u5b9a\\u4e49\\u65b9\\u6cd5\\u7684\\u90e8\\u5206\\u4e0e\\u5177\\u4f53\\u5b9e\\u73b0\\u5408\\u7ea6\\u5206\\u79bb\\uff0c\\u4ece\\u800c\\u5b9e\\u73b0\\u4e86\\u89e3\\u8026\\u5408\\u3002\\u56e0\\u6b64\\u6211\\u4eec\\u53ef\\u4ee5\\u57fa\\u4e8e\\u63a5\\u53e3\\u6765\\u8fdb\\u884c\\u5408\\u7ea6\\u95f4\\u7684\\u76f8\\u4e92\\u8c03\\u7528\\uff0c \\u800c\\u4e0d\\u662f\\u57fa\\u4e8e\\u5b9e\\u73b0\\u3002*\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/\\u63a5\\u53e3/ICounter.sol\":\"ICounter\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"test/\\u63a5\\u53e3/ICounter.sol\":{\"keccak256\":\"0xe6cdccad137095db8ad7c2020b1421c9cac1ec9a507400c063605942c8cc86d5\",\"urls\":[\"bzz-raw://fe6d9a97c2e77244a21acc8ce1700a349bede36fcd8210476f99799363a8a4b7\",\"dweb:/ipfs/QmTDwWUXDqzE4qjEk1LVxbMWip8N6DzfCt6bpmwRAVK1wW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"notice": "接口的作用主要体现在以下几个方面： 规范行为：接口定义了一组方法，要求实现这个接口的合约必须提供这些方法的具体实现。通过实现接口，可以确保一组合约拥有相同的方法，并且这些方法的功能和行为是一致的，从而增强了代码的一致性和可预测性。 解耦合：接口可以将定义方法的部分与具体实现合约分离，从而实现了解耦合。因此我们可以基于接口来进行合约间的相互调用， 而不是基于实现。*",
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> test/接口/ICounter.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "test/接口/ICounter.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"test/接口/ICounter.sol": {
				"ast": {
					"absolutePath": "test/接口/ICounter.sol",
					"exportedSymbols": {
						"ICounter": [
							6
						]
					},
					"id": 7,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"~",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ICounter",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "61:561:0",
								"text": "接口的作用主要体现在以下几个方面：\n规范行为：接口定义了一组方法，要求实现这个接口的合约必须提供这些方法的具体实现。通过实现接口，可以确保一组合约拥有相同的方法，并且这些方法的功能和行为是一致的，从而增强了代码的一致性和可预测性。\n解耦合：接口可以将定义方法的部分与具体实现合约分离，从而实现了解耦合。因此我们可以基于接口来进行合约间的相互调用， 而不是基于实现。*"
							},
							"fullyImplemented": false,
							"id": 6,
							"linearizedBaseContracts": [
								6
							],
							"name": "ICounter",
							"nameLocation": "634:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "d09de08a",
									"id": 5,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "increment",
									"nameLocation": "778:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "787:2:0"
									},
									"returnParameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "799:0:0"
									},
									"scope": 6,
									"src": "769:31:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 7,
							"src": "624:179:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "33:770:0"
				},
				"id": 0
			}
		}
	}
}